from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import os

def wrap_text(pdf_canvas, text, max_width):
    # Wrap text to fit within the specified max_width
    lines = []
    current_line = ""
    
    for word in text.split():
        if pdf_canvas.stringWidth(current_line + word, 'Helvetica', 12) < max_width:
            current_line += word + " "
        else:
            lines.append(current_line.strip())
            current_line = word + " "
    
    lines.append(current_line.strip())
    
    return lines

def create_pdf_report(input_file, output_file):

    # Create a PDF document
    pdf_canvas = canvas.Canvas(output_file, pagesize=letter)
    
    # Set font and size for the title
    pdf_canvas.setFont("Helvetica-Bold", 16)
    
    # Add the big heading
    title_x = pdf_canvas._pagesize[0] / 2  # Center of the page
    title_y = pdf_canvas._pagesize[1] - 50

    pdf_canvas.setFont("Helvetica-Bold", 16)
    pdf_canvas.setFillColorRGB(1, 0, 0)  # Red color
    pdf_canvas.drawCentredString(title_x, title_y, "Report Generated by ZeroX Analyser | Anubhav Dhakal")
    pdf_canvas.setFillColorRGB(0, 0, 0)

    pdf_canvas.setFont("Helvetica", 12)
    y_coordinate = pdf_canvas._pagesize[1] - 100

    for filename in os.listdir(input_file):
        if filename.endswith(".txt"):
            input_text_file = os.path.join(input_file, filename)

            with open(input_text_file, 'r') as file:
                lines = file.readlines()

            for line in lines:
                if line.startswith("Name"):
                    vulnerability_info = line.strip().split(': ', 1)[1]
                    pdf_canvas.setFont("Helvetica-Bold", 14)
                    pdf_canvas.drawString(72, y_coordinate, f"Name: {vulnerability_info}")
                    y_coordinate -= 20

                elif line.startswith("Line"):
                    line_info = line.strip().split(': ', 1)[1]
                    pdf_canvas.setFont("Helvetica", 12)
                    pdf_canvas.drawString(72, y_coordinate, f"Line: {line_info}")
                    y_coordinate -= 20

                if y_coordinate <= 100:  # If we reach bottom of the page, create a new page
                    pdf_canvas.showPage()
                    y_coordinate = pdf_canvas._pagesize[1] - 100

    # Save the PDF
    pdf_canvas.save()
    print(f"PDF report saved as {output_file}")
